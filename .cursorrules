# Cursor Project Rules for Signals Application

## Project Overview
This is a modern, enterprise-grade React application built with TypeScript, featuring comprehensive accessibility, performance optimization, and maintainable architecture patterns. The application has been extensively refactored to demonstrate best practices in modern React development.

## Tech Stack
- **React 18** with TypeScript
- **Vite** for build tooling
- **Tailwind CSS** for styling
- **React Router DOM** for routing
- **Heroicons** for consistent iconography
- **Custom utility library** with 200+ functions

## Architecture Patterns

### Component Architecture
- Use **compound components** for flexible composition (e.g., `Page.Header`, `Page.Content`)
- Implement **render props** for flexible data composition (e.g., `DataProvider`)
- Create **Higher-Order Components (HOCs)** for cross-cutting concerns (e.g., `withPageData`)
- Prefer **composition over inheritance**
- Follow **single responsibility principle**

### State Management
- Use **React Context** for global and page-specific state
- Implement **custom hooks** for encapsulated business logic
- Minimize state, prefer derived state
- Use **reducer pattern** for complex state logic
- Implement **optimistic updates** where appropriate

### Error Handling
- Implement **error boundaries** at app and page levels
- Use **retry logic** with exponential backoff
- Provide **user-friendly error messages**
- Implement **network status monitoring**
- Use **toast notifications** for non-blocking errors

## Code Quality Standards

### TypeScript
- Use **strict TypeScript** configuration
- Implement **branded types** for type safety (e.g., `SignalId`, `BrandId`)
- Use **generic types** for reusable components
- Implement **type guards** for runtime validation
- Avoid `any` type, use `unknown` when necessary
- Use **union types** for state management
- Implement **discriminated unions** for complex state

### Component Development
- Use **functional components** with hooks
- Implement **proper prop interfaces** with TypeScript
- Use **default props** with proper typing
- Implement **forwardRef** for component refs
- Use **React.memo** for performance optimization
- Implement **useCallback** and **useMemo** for expensive operations
- Use **Icon component** for all iconography (no inline SVGs)

### Accessibility (WCAG 2.1 AA Compliance)
- Implement **semantic HTML** elements
- Add **ARIA attributes** (aria-label, aria-describedby, aria-expanded, etc.)
- Ensure **keyboard navigation** support
- Implement **focus management** and trapping
- Add **screen reader** support with live regions
- Use **high contrast** colors and focus indicators
- Implement **reduced motion** support
- Add **skip links** for keyboard users

### Performance
- Implement **lazy loading** for components and routes
- Use **React.memo** for preventing unnecessary re-renders
- Implement **useMemo** for expensive calculations
- Use **useCallback** for stable function references
- Implement **virtual scrolling** for large lists
- Use **debouncing** and **throttling** for event handlers
- Implement **code splitting** at route level

## File Organization

### Directory Structure
```
src/
├── components/          # Reusable UI components
├── constants/          # Application constants and configuration
├── contexts/           # React contexts for state management
├── hooks/              # Custom React hooks
├── pages/              # Page components
├── types/              # TypeScript type definitions
├── utils/              # Utility functions (200+ functions)
├── App.tsx             # Main application component
└── main.tsx            # Application entry point
```

### Naming Conventions
- **Components**: PascalCase (e.g., `AccessibleButton.tsx`)
- **Hooks**: camelCase starting with 'use' (e.g., `useSignals.ts`)
- **Utilities**: camelCase (e.g., `stringUtils.ts`)
- **Types**: PascalCase (e.g., `SignalStatus`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `APP_NAME`)
- **Files**: kebab-case for utilities, PascalCase for components

### Import/Export Patterns
- Use **named exports** for utilities and hooks
- Use **default exports** for components
- Implement **barrel exports** in index.ts files
- Use **absolute imports** from src/ directory
- Group imports: React, third-party, local components, utilities

## Component Guidelines

### Component Structure
```typescript
// 1. Imports (React, third-party, local)
import React, { useState, useCallback } from 'react';
import { useSignals } from '../hooks';

// 2. Type definitions
interface ComponentProps {
  // Props with proper typing
}

// 3. Component implementation
const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // 4. Hooks
  const { data, loading, error } = useSignals();
  
  // 5. Event handlers
  const handleClick = useCallback(() => {
    // Implementation
  }, [dependencies]);
  
  // 6. Render
  return (
    <div>
      {/* JSX */}
    </div>
  );
};

// 7. Default export
export default Component;
```

### Accessibility Requirements
- Add **role attributes** where appropriate
- Implement **keyboard event handlers**
- Use **aria-live regions** for dynamic content
- Ensure **color contrast** meets WCAG standards
- Implement **focus management** for modals and dropdowns
- Add **screen reader only text** for context

### Error Handling
- Implement **error boundaries** for component trees
- Use **try-catch** blocks for async operations
- Provide **fallback UI** for error states
- Implement **retry mechanisms** for failed operations
- Log errors for debugging

## Icon System

### Icon Component Usage
- Use **Heroicons** through the unified `Icon` component
- Import from `../components` or `../constants` for convenience
- Use **type-safe icon names** with TypeScript validation
- Apply **consistent sizing** with predefined size options

### Icon Implementation
```typescript
import { Icon } from '../components';

// Basic usage
<Icon name="plus" />

// With sizing
<Icon name="building" size="lg" />

// With custom styling
<Icon name="users" className="text-indigo-600" />
```

### Available Icons
- `plus` - PlusIcon
- `building` - BuildingOfficeIcon  
- `target` - CheckCircleIcon
- `users` - UsersIcon
- `more-vertical` - EllipsisVerticalIcon
- `edit` - PencilIcon
- `trash` - TrashIcon

### Icon Guidelines
- **Never use inline SVGs** - always use the Icon component
- **Use semantic icon names** that describe the action or content
- **Apply consistent sizing** with the `size` prop
- **Maintain accessibility** with proper ARIA attributes
- **Add new icons** by updating the Icon component's iconMap

### IconButton Component
- Use **IconButton** for icon-only buttons with the same API as Button
- **Required ariaLabel** for accessibility since there's no visible text
- **Same variants** as Button: primary, secondary
- **Same sizes** as Button: sm, md, lg
- **Loading states** with integrated spinner
- **Type-safe icons** using the Icon component

#### IconButton Usage
```typescript
import { IconButton } from '../components';

// Basic usage
<IconButton icon="plus" ariaLabel="Add item" onClick={handleAdd} />

// With variant and size
<IconButton 
  icon="edit" 
  variant="secondary" 
  size="lg" 
  ariaLabel="Edit item" 
  onClick={handleEdit} 
/>

// With loading state
<IconButton 
  icon="save" 
  ariaLabel="Save" 
  loading={isSaving} 
  onClick={handleSave} 
/>
```

## Utility Library Usage

### Available Utilities
- **String**: `capitalize`, `toTitleCase`, `truncate`, `slugify`
- **Array**: `unique`, `groupBy`, `sortBy`, `chunk`, `flatten`
- **Object**: `deepClone`, `pick`, `omit`, `getObjectProperty`
- **Date**: `formatDate`, `addDays`, `isToday`, `getRelativeTime`
- **Validation**: `isRequired`, `isValidEmail`, `minLength`
- **Format**: `formatCurrency`, `formatNumber`, `formatFileSize`
- **Storage**: `localStorage`, `sessionStorage`, `cookies`
- **API**: `get`, `post`, `ApiClient`, `EnhancedApiClient`
- **Performance**: `debounce`, `throttle`, `memoize`
- **DOM**: `$`, `$$`, `createElement`, `addEventListener`

### Usage Examples
```typescript
import { capitalize, groupBy, formatCurrency, debounce } from '../utils';

// String utilities
const title = capitalize('hello world'); // "Hello world"

// Array utilities
const grouped = groupBy(items, 'category');

// Format utilities
const price = formatCurrency(1234.56); // "$1,234.56"

// Performance utilities
const debouncedSearch = debounce(searchFunction, 300);
```

## Testing Guidelines

### Component Testing
- Test **user interactions** and event handlers
- Test **accessibility** features (keyboard navigation, screen reader)
- Test **error states** and edge cases
- Test **loading states** and async operations
- Mock **external dependencies** and APIs

### Utility Testing
- Test **edge cases** and boundary conditions
- Test **type safety** with various inputs
- Test **performance** with large datasets
- Test **error handling** and validation

## Performance Guidelines

### Optimization Strategies
- Use **React.memo** for expensive components
- Implement **useMemo** for expensive calculations
- Use **useCallback** for stable function references
- Implement **lazy loading** for routes and components
- Use **virtual scrolling** for large lists
- Implement **debouncing** for search and input handlers

### Bundle Optimization
- Use **dynamic imports** for code splitting
- Implement **tree shaking** for unused code
- Use **barrel exports** for better tree shaking
- Optimize **image assets** and lazy load them
- Use **CDN** for third-party libraries

## Accessibility Guidelines

### WCAG 2.1 AA Compliance
- **Perceivable**: High contrast, scalable text, alternative text
- **Operable**: Keyboard navigation, no seizure-inducing content
- **Understandable**: Clear navigation, consistent patterns
- **Robust**: Valid HTML, compatible with assistive technologies

### Implementation Checklist
- [ ] Semantic HTML elements
- [ ] ARIA attributes and roles
- [ ] Keyboard navigation support
- [ ] Focus management and indicators
- [ ] Screen reader compatibility
- [ ] Color contrast compliance
- [ ] Reduced motion support
- [ ] Mobile accessibility

## Security Guidelines

### Input Validation
- Validate **all user inputs** on client and server
- Sanitize **HTML content** to prevent XSS
- Implement **CSRF protection** for forms
- Use **Content Security Policy** headers
- Regular **dependency security** audits

### Data Handling
- Use **HTTPS** for all communications
- Implement **proper authentication** and authorization
- Sanitize **sensitive data** in logs
- Use **secure storage** for sensitive information

## Git Workflow

### Commit Messages
- Use **conventional commits** format
- Include **scope** for specific areas (feat, fix, docs, style, refactor)
- Provide **detailed descriptions** for complex changes
- Reference **issue numbers** when applicable

### Branch Naming
- **feature/**: New features (e.g., `feature/accessibility-improvements`)
- **fix/**: Bug fixes (e.g., `fix/memory-leak`)
- **refactor/**: Code refactoring (e.g., `refactor/component-structure`)
- **docs/**: Documentation updates (e.g., `docs/api-documentation`)

## Code Review Guidelines

### Review Checklist
- [ ] TypeScript types are properly defined
- [ ] Accessibility features are implemented
- [ ] Error handling is comprehensive
- [ ] Performance optimizations are applied
- [ ] Tests are written and passing
- [ ] Documentation is updated
- [ ] Code follows established patterns
- [ ] Security considerations are addressed

### Quality Gates
- All **TypeScript errors** must be resolved
- **Accessibility tests** must pass
- **Performance benchmarks** must be met
- **Code coverage** must be above 80%
- **Security scans** must pass
- **Linting rules** must be satisfied

## Development Environment

### Required Tools
- **Node.js** (v18 or higher)
- **npm** (v8 or higher) or **yarn**
- **VS Code** with recommended extensions
- **Git** for version control

### Recommended Extensions
- **TypeScript and JavaScript Language Features**
- **ESLint**
- **Prettier**
- **Tailwind CSS IntelliSense**
- **Auto Rename Tag**
- **Bracket Pair Colorizer**
- **GitLens**

## Troubleshooting

### Common Issues
- **TypeScript errors**: Check type definitions and imports
- **Accessibility issues**: Use browser dev tools and screen readers
- **Performance problems**: Use React DevTools Profiler
- **Build errors**: Check Vite configuration and dependencies
- **Runtime errors**: Check error boundaries and error handling

### Debugging Tools
- **React DevTools** for component inspection
- **Browser DevTools** for performance and accessibility
- **TypeScript compiler** for type checking
- **ESLint** for code quality
- **Lighthouse** for performance and accessibility audits

---

**Remember**: This application serves as a reference implementation for modern React best practices. Always prioritize accessibility, performance, and maintainability in your development decisions.
